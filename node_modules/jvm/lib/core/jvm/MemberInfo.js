'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MemberInfo = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Abstract class for extracting the same functionality between the FieldInfo,
 * MethodInfo, and ClassInfo classes.
 */
var MemberInfo = function () {
  /**
   * @param  {Number} accessFlags - access flags bit string
   * @param  {string} name - name of this entry in the ClassFile
   */
  function MemberInfo(accessFlags, name) {
    _classCallCheck(this, MemberInfo);

    this._attributes = [];
    this._flags = accessFlags;
    this._name = name;
  }

  /**
   * Access flags bit string
   * @return {Number}
   */


  _createClass(MemberInfo, [{
    key: 'addAttribute',


    /**
     * Adds the specified attribute to this entry's collection of attributes.
     * @param {AttributeInfo} attr
     */
    value: function addAttribute(attr) {
      this._attributes.push(attr);
    }

    /**
     * Finds the first attribute for a given name.
     * @param  {string} name - search criteria
     * @return {AttributeInfo|undefined}
     */

  }, {
    key: 'findAttributeByName',
    value: function findAttributeByName(name) {
      return _.first(this.findAttributesByName(name));
    }

    /**
     * Finds all attributes that exactly match the specified name.
     * @param  {string} name - search criteria
     * @return {Array<AttributeInfo>}
     */

  }, {
    key: 'findAttributesByName',
    value: function findAttributesByName(name) {
      return this.attributes.filter(function (attr) {
        return attr.name === name;
      });
    }

    /**
     * Checks to see if an access flag bit has been set.
     * @param  {Number} flag - bitmask
     * @return {Boolean}
     */

  }, {
    key: 'hasFlag',
    value: function hasFlag(flag) {
      return (this.accessFlags & flag) !== 0;
    }

    /**
     * The name of this entry in the JVM Class File.
     * @return {string}
     */

  }, {
    key: 'toObject',


    /**
     * Serialized version of this class without circular references.
     * @return {Object}
     */
    value: function toObject() {
      return {
        name: this.name,
        accessFlags: this.accessFlags,
        attributes: _.map(this.attributes, function (attribute) {
          return attribute.toObject();
        })
      };
    }
  }, {
    key: 'accessFlags',
    get: function get() {
      return this._flags;
    }

    /**
     * Collection of {@link AttributeInfo>} objects belonging to this entry.
     * @return {Array<AttributeInfo>}
     */

  }, {
    key: 'attributes',
    get: function get() {
      return this._attributes;
    }
  }, {
    key: 'name',
    get: function get() {
      return this._name;
    }
  }]);

  return MemberInfo;
}();

exports.MemberInfo = MemberInfo;