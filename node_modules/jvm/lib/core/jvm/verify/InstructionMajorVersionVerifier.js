'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InstructionMajorVersionVerifier = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

var _Opcodes = require('../instructions/Opcodes');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WritingErrors = require('../../../errors').Writing;

/**
 * Utility class for verifying that all methods for a given class do not use
 * instructions that are not available in their Java SE runtime.
 */
var InstructionMajorVersionVerifier = function () {
  /**
   * @param  {ClassInfo} classInfo
   */
  function InstructionMajorVersionVerifier(classInfo) {
    _classCallCheck(this, InstructionMajorVersionVerifier);

    /**
     * @private
     * @type {ClassInfo}
     */
    this.classInfo = classInfo;
    /**
     * @private
     * @type {Array<Number>}
     */
    this.unusableOpcodes = this.findUnusableOpcodes();
  }

  /**
   * Finds all opcodes with a version higher than the {@link ClassInfo} object
   * being verified.
   *
   * Checks against {@link Opcodes.OPCODE_VERSIONS}
   * @return {Array<Number>} flat array of opcodes that are not available in
   * the Java SE runtime of the JVM Class File.
   */


  _createClass(InstructionMajorVersionVerifier, [{
    key: 'findUnusableOpcodes',
    value: function findUnusableOpcodes() {
      var _this = this;

      return _.flatten(_.filter(_Opcodes.OPCODE_VERSIONS, function (opcodes, version) {
        return version > _this.classInfo.major;
      }));
    }

    /**
     * Finds the intersection between the unusable opcodes and the opcodes
     * present in {@link MethodInfo.instructions}.
     * @param  {MethodInfo} method
     * @return {Array<Number>}
     */

  }, {
    key: 'findInvalidMethodOpcodes',
    value: function findInvalidMethodOpcodes(method) {
      var opcodes = _.pluck(method.instructions, 'opcode');
      return _.intersection(opcodes, this.unusableOpcodes);
    }

    /**
     * Determines if the {@link ClassInfo} object only has opcodes that are
     * usable for the given Java SE runtime.
     * @return {Boolean}
     */

  }, {
    key: 'verify',
    value: function verify() {
      var _this2 = this;

      return _.every(this.classInfo.methods, function (method) {
        var invalid = _this2.findInvalidMethodOpcodes(method);

        if (invalid.length > 0) {
          throw WritingErrors.UnsupportedOpcode(unusable[0], _this2.classInfo, method);
        }

        return true;
      });
    }
  }]);

  return InstructionMajorVersionVerifier;
}();

exports.InstructionMajorVersionVerifier = InstructionMajorVersionVerifier;