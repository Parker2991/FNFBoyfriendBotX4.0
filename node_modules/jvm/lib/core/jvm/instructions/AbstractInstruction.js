'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

var _Opcodes = require('./Opcodes');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AbstractInstruction = function () {
  function AbstractInstruction(methodInfo, idx, opcode) {
    _classCallCheck(this, AbstractInstruction);

    this.methodInfo = methodInfo;
    this.idx = idx;
    this.opcode = opcode;
    this.wide = false;
    this.offset = 0;
    this.previous = null;
    this.next = null;
  }

  _createClass(AbstractInstruction, [{
    key: 'read',
    value: function read(buffer) {
      this.offset = buffer.pos - 1;
    }
  }, {
    key: 'write',
    value: function write(buffer) {
      buffer.writeByte(this.opcode);
    }
  }, {
    key: 'toObject',
    value: function toObject() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var defaults = {
        idx: this.idx,
        opcode: this.opcode,
        offset: this.offset,
        opname: this.opname,
        size: this.size
      };

      return _.merge(defaults, props);
    }
  }, {
    key: 'toString',
    value: function toString() {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var params = _.map(props, function (val, key) {
        return key + '=' + val;
      }).join(', ');
      return this.opname + ' [' + params + ']';
    }
  }, {
    key: 'opname',
    get: function get() {
      return _Opcodes.OPCODE_TO_NAME[this.opcode];
    }
  }, {
    key: 'size',
    get: function get() {
      return 1;
    }
  }, {
    key: 'pool',
    get: function get() {
      return this.methodInfo._classInfo.pool;
    }
  }]);

  return AbstractInstruction;
}();

exports.default = AbstractInstruction;


module.exports = AbstractInstruction;