'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FieldInfo = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

var _MemberInfo2 = require('./MemberInfo');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Wrapper for JVM Class File field entry.
 */
var FieldInfo = function (_MemberInfo) {
  _inherits(FieldInfo, _MemberInfo);

  /**
   * @param  {ClassInfo} classInfo - The class the given field is in
   * @param  {Number} accessFlags - access flags bit string
   * @param  {string} name - name of this entry in the ClassFile
   * @param  {string} descriptor - type descriptor
   */
  function FieldInfo(classInfo, flags, name, descriptor) {
    _classCallCheck(this, FieldInfo);

    /** @type {ClassInfo} class this field is within */
    var _this = _possibleConstructorReturn(this, (FieldInfo.__proto__ || Object.getPrototypeOf(FieldInfo)).call(this, flags, name));

    _this._classInfo = classInfo;
    /** @type {string} type descriptor */
    _this._descriptor = descriptor;
    return _this;
  }

  /**
   * Access the class this member is within
   * @return {ClassInfo}
   */


  _createClass(FieldInfo, [{
    key: 'toObject',


    /**
     * Serialized version of this class without circular references.
     * @return {Object}
     */
    value: function toObject() {
      return _.merge(_get(FieldInfo.prototype.__proto__ || Object.getPrototypeOf(FieldInfo.prototype), 'toObject', this).call(this), {
        desc: this.desc
      });
    }
  }, {
    key: 'classInfo',
    get: function get() {
      return this._classInfo;
    }

    /**
     * JVM type descriptor
     * @return {string}
     */

  }, {
    key: 'desc',
    get: function get() {
      return this._descriptor;
    }
  }]);

  return FieldInfo;
}(_MemberInfo2.MemberInfo);

exports.FieldInfo = FieldInfo;