'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ACC_ENUM = exports.ACC_ANNOTATION = exports.ACC_SYNTHETIC = exports.ACC_STRICT = exports.ACC_ABSTRACT = exports.ACC_INTERFACE = exports.ACC_NATIVE = exports.ACC_VARARGS = exports.ACC_TRANSIENT = exports.ACC_BRIDGE = exports.ACC_VOLATILE = exports.ACC_SYNCHRONIZED = exports.ACC_SUPER = exports.ACC_FINAL = exports.ACC_STATIC = exports.ACC_PROTECTED = exports.ACC_PRIVATE = exports.ACC_PUBLIC = exports.Flags = exports.FlagMethods = exports.MethodNames = undefined;

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var ACC_PUBLIC = 0x0001;
var ACC_PRIVATE = 0x0002;
var ACC_PROTECTED = 0x0004;
var ACC_STATIC = 0x0008;
var ACC_FINAL = 0x0010;
var ACC_SUPER = 0x0020; // ClassInfo only
var ACC_SYNCHRONIZED = 0x0020;
var ACC_VOLATILE = 0x0040;
var ACC_BRIDGE = 0x0040;
var ACC_TRANSIENT = 0x0080;
var ACC_VARARGS = 0x0080;
var ACC_NATIVE = 0x100;
var ACC_INTERFACE = 0x0200;
var ACC_ABSTRACT = 0x0400;
var ACC_STRICT = 0x0800;
var ACC_SYNTHETIC = 0x1000;
var ACC_ANNOTATION = 0x2000;
var ACC_ENUM = 0x4000;

var FLAGS = {
  ACC_PUBLIC: ACC_PUBLIC,
  ACC_PRIVATE: ACC_PRIVATE,
  ACC_PROTECTED: ACC_PROTECTED,
  ACC_STATIC: ACC_STATIC,
  ACC_FINAL: ACC_FINAL,
  ACC_SUPER: ACC_SUPER,
  ACC_SYNCHRONIZED: ACC_SYNCHRONIZED,
  ACC_VOLATILE: ACC_VOLATILE,
  ACC_BRIDGE: ACC_BRIDGE,
  ACC_TRANSIENT: ACC_TRANSIENT,
  ACC_VARARGS: ACC_VARARGS,
  ACC_NATIVE: ACC_NATIVE,
  ACC_INTERFACE: ACC_INTERFACE,
  ACC_ABSTRACT: ACC_ABSTRACT,
  ACC_STRICT: ACC_STRICT,
  ACC_SYNTHETIC: ACC_SYNTHETIC,
  ACC_ANNOTATION: ACC_ANNOTATION,
  ACC_ENUM: ACC_ENUM
};

var MethodNames = exports.MethodNames = _.fromPairs(_.map(FLAGS, function (val, key) {
  var name = key.split('_')[1].toLowerCase();
  return [val, 'is' + name[0].toUpperCase() + name.substring(1)];
}));

var FlagMethods = exports.FlagMethods = _.fromPairs(_.map(MethodNames, function (methodName, mask) {
  return [methodName, function (flag) {
    return (mask & flag) !== 0;
  }];
}));

/**
 * [AccessFlags description]
 */
function AccessFlags() {
  var funcs = _.clone(FlagMethods);

  funcs.listFlags = function (flags) {
    return _.filter(_.map(FlagMethods, function (maskFunc, name) {
      return maskFunc(flags) ? name.substring(2).toLowerCase() : null;
    }));
  };

  return funcs;
}

var ACCESS_FLAGS = new AccessFlags();

/** @type {AccessFlags} */
var Flags = ACCESS_FLAGS;

exports.Flags = Flags;
exports.ACC_PUBLIC = ACC_PUBLIC;
exports.ACC_PRIVATE = ACC_PRIVATE;
exports.ACC_PROTECTED = ACC_PROTECTED;
exports.ACC_STATIC = ACC_STATIC;
exports.ACC_FINAL = ACC_FINAL;
exports.ACC_SUPER = ACC_SUPER;
exports.ACC_SYNCHRONIZED = ACC_SYNCHRONIZED;
exports.ACC_VOLATILE = ACC_VOLATILE;
exports.ACC_BRIDGE = ACC_BRIDGE;
exports.ACC_TRANSIENT = ACC_TRANSIENT;
exports.ACC_VARARGS = ACC_VARARGS;
exports.ACC_NATIVE = ACC_NATIVE;
exports.ACC_INTERFACE = ACC_INTERFACE;
exports.ACC_ABSTRACT = ACC_ABSTRACT;
exports.ACC_STRICT = ACC_STRICT;
exports.ACC_SYNTHETIC = ACC_SYNTHETIC;
exports.ACC_ANNOTATION = ACC_ANNOTATION;
exports.ACC_ENUM = ACC_ENUM;