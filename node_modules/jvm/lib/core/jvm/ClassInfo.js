'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClassInfo = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

var _MemberInfo2 = require('./MemberInfo');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * A wrapper for the JVM Class File format with helper methods for
 * adding and removing members from it.
 */
var ClassInfo = function (_MemberInfo) {
  _inherits(ClassInfo, _MemberInfo);

  /**
   * @param  {Number} flags - access flags bit string
   * @param  {{major: Number, minor: Number}} version - Java SE compilation target versions
   * @param  {string} name - name of the class file
   * @param  {string} superName - Super class name
   * @param  {ConstantPool} pool - {@link ConstantPool} reference for this class
   */
  function ClassInfo(flags, version, name, superName, pool) {
    _classCallCheck(this, ClassInfo);

    /** @type {Object} */
    var _this = _possibleConstructorReturn(this, (ClassInfo.__proto__ || Object.getPrototypeOf(ClassInfo)).call(this, flags, name));

    _this._version = version;
    _this._fields = [];
    _this._interfaces = [];
    _this._methods = [];
    _this._pool = pool;
    _this._superName = superName;
    return _this;
  }

  /**
   * Adds a field to this instance's JVM Class File representation.
   * @param {string} inter - FQCN of the interface to assign to this class
   */


  _createClass(ClassInfo, [{
    key: 'addInterface',
    value: function addInterface(inter) {
      this._interfaces.push(inter);
    }

    /**
     * Adds a field to this instance's JVM Class File representation.
     * @param {FieldInfo} field
     */

  }, {
    key: 'addField',
    value: function addField(field) {
      this._fields.push(field);
    }

    /**
     * Adds a method to this instance's JVM Class File representation.
     * @param {MethodInfo} method
     */

  }, {
    key: 'addMethod',
    value: function addMethod(method) {
      this._methods.push(method);
    }

    /**
     * Array of FieldInfo objects in the underlying JVM Class File.
     * @return {Array<FieldInfo>}
     */

  }, {
    key: 'toJson',


    /**
     * Helper method for casting this instance into a JSON string.
     * @return {string}
     */
    value: function toJson() {
      return JSON.stringify(this.toObject(), null, 2);
    }

    /**
     * Serialized version of this class without circular references.
     * @return {Object}
     */

  }, {
    key: 'toObject',
    value: function toObject() {
      var obj = _get(ClassInfo.prototype.__proto__ || Object.getPrototypeOf(ClassInfo.prototype), 'toObject', this).call(this);
      var props = {
        superName: this.superName,
        major: this.major,
        minor: this.minor,
        interfaces: this.interfaces,
        pool: this._pool.toObject(),
        fields: _.map(this.fields, function (field) {
          return field.toObject();
        }),
        methods: _.map(this.methods, function (method) {
          return method.toObject();
        })
      };

      return _.merge(obj, props);
    }
  }, {
    key: 'fields',
    get: function get() {
      return this._fields;
    }

    /**
     * Array of interfaces represented as strings in the FQCN format
     * that this class implements.
     * @return {Array<string>}
     */

  }, {
    key: 'interfaces',
    get: function get() {
      return this._interfaces;
    }

    /**
     * The major version of the target Java SE platform this was
     * compiled for.
     * @return {Number}
     */

  }, {
    key: 'major',
    get: function get() {
      return this._version.major;
    }

    /**
     * Array of MethodInfo objects in the underlying JVM Class File.
     * @return {Array<MethodInfo>}
     */

  }, {
    key: 'methods',
    get: function get() {
      return this._methods;
    }

    /**
     * The minor version of the target Java SE platform this was
     * compiled for.
     * @return {Number}
     */

  }, {
    key: 'minor',
    get: function get() {
      return this._version.minor;
    }

    /**
     * {@link ConstantPool} of the underlying JVM Class File.
     * @return {ConstantPool}
     */

  }, {
    key: 'pool',
    get: function get() {
      return this._pool;
    }

    /**
     * The name of the super class for this JVM Class File.
     * @return {string|null}
     */

  }, {
    key: 'superName',
    get: function get() {
      return this._superName;
    }
  }]);

  return ClassInfo;
}(_MemberInfo2.MemberInfo);

exports.ClassInfo = ClassInfo;