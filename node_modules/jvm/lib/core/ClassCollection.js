'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClassCollection = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Wrapper for a {@link Map} with keys being {@link string}s and entries
 * being {@link ClassInfo} objects.
 */
var ClassCollection = function () {
  /**
   * @private
   * @param  {Map<string, ClassInfo>} map
   */
  function ClassCollection(map) {
    _classCallCheck(this, ClassCollection);

    /** @type {Map<string, ClassInfo>} */
    this._classes = map;
  }

  /**
   * Exposes the raw {@link Map} object.
   * @public
   * @return {Map<string, ClassInfo>}
   */


  _createClass(ClassCollection, [{
    key: 'get',


    /**
     * Retrieves a {@link ClassInfo} object from the collection by name.
     * @public
     * @param  {string} name
     * @return {ClassInfo|undefined}
     */
    value: function get(name) {
      return this.classes.get(name);
    }

    /**
     * Checks to see if the collection contains an entry for the specified name.
     * @public
     * @param  {string}  name
     * @return {Boolean}
     */

  }, {
    key: 'has',
    value: function has(name) {
      return this.classes.has(name);
    }

    /**
     * Sets the corresponding entry in the collection for the specified name.
     * @public
     * @param {string} name
     * @param {ClassInfo} cls
     */

  }, {
    key: 'set',
    value: function set(name, cls) {
      return this.classes.set(name, cls);
    }

    /**
     * @return {Iterable}
     */

  }, {
    key: Symbol.iterator,
    value: function value() {
      return this._classes.entries();
    }

    /**
     * Static constructor for a new, empty {@link ClassCollection}.
     * @public
     * @return {ClassCollection}
     */

  }, {
    key: 'classes',
    get: function get() {
      return this._classes;
    }
  }], [{
    key: 'empty',
    value: function empty() {
      return new ClassCollection(new Map());
    }

    /**
     * Static constructor for creating a new {@link ClassCollection} instance
     * from a {@link Map}.
     * @public
     * @param  {Map<string, ClassInfo>} classes
     * @return {ClassCollection}
     */

  }, {
    key: 'of',
    value: function of(classes) {
      if (classes instanceof Map) {
        return new ClassCollection(classes);
      }

      var mapping = new Map();
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = classes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2),
              name = _step$value[0],
              cls = _step$value[1];

          mapping.set(name, cls);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return new ClassCollection(mapping);
    }
  }]);

  return ClassCollection;
}();

exports.ClassCollection = ClassCollection;