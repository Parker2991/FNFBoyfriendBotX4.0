'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ClassWriter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _InstructionMajorVersionVerifier = require('../../jvm/verify/InstructionMajorVersionVerifier');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var JVM_CLASS_FILE_MAGIC_NUMBER = 0xcafebabe;

/**
 * Writes a ClassInfo object to a buffer and verifies that its attributes are
 * valid.
 */

var ClassWriter = function () {
  /**
   * @param  {ClassInfo} cls - {@link ClassInfo} object to write
   * @param  {NiceBuffer} buffer - buffer to write to
   */
  function ClassWriter(cls, buffer) {
    _classCallCheck(this, ClassWriter);

    /** @type {ClassInfo} */
    this.cls = cls;
    /** @type {NiceBuffer} */
    this.buffer = buffer;
    /** @type {InstructionMajorVersionVerifier} */
    this.majorVerifier = new _InstructionMajorVersionVerifier.InstructionMajorVersionVerifier(cls);
  }

  /**
   * Verifies the contents of {@link ClassInfo.cls} is correct.
   * @return {Boolean}
   */


  _createClass(ClassWriter, [{
    key: 'verify',
    value: function verify() {
      // will need to change to ensure all verifiers pass before returning once they are added
      return this.majorVerifier.verify();
    }

    /**
     * Verifies and writes the {@link ClassInfo} object to the buffer.
     */

  }, {
    key: 'write',
    value: function write() {
      if (!this.verify()) {
        throw new Error('Unable to verify class contents for writing: ' + this.cls.name);
      }

      this.writeHeader();
      this.writeVersions();
      // TODO: output rest of class file structure
    }

    /**
     * Writes the JVM class file magic number. 0xCAFEBABE
     */

  }, {
    key: 'writeHeader',
    value: function writeHeader() {
      this.buffer.writeInt(JVM_CLASS_FILE_MAGIC_NUMBER);
    }

    /**
     * Writes the Java SE runtime this class file was targeted for.
     */

  }, {
    key: 'writeVersions',
    value: function writeVersions() {
      this.buffer.writeShort(this.cls.minor);
      this.buffer.writeShort(this.cls.major);
    }
  }]);

  return ClassWriter;
}();

exports.ClassWriter = ClassWriter;