'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Jar = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

var _ClassLoader = require('./ClassLoader');

var _ClassCollection = require('./ClassCollection');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AdmZip = require('adm-zip');

/**
 * Wrapper around a Java Archive file.
 *
 * Provides convenience methods for loading a Jar's classes.
 *
 * @see https://en.wikipedia.org/wiki/JAR_(file_format)
 */

var Jar = function () {
  /**
   * You probably want to create a new instance using {@link Jar.unpack}
   * @param  {string} file - path to Jar file
   */
  function Jar(file) {
    _classCallCheck(this, Jar);

    this._file = file;
    this._classBuffers = new Map();
    this._classes = _ClassCollection.ClassCollection.empty();
  }

  /**
   * @return {string} path to Jar file
   */


  _createClass(Jar, [{
    key: 'loadBuffers',


    /**
     * @private
     * @return {Promise<Jar>}
     */
    value: function loadBuffers() {
      var _this = this;

      var archive = new AdmZip(this.file);
      return new Promise(function (resolve, reject) {
        Promise.all(archive.getEntries().filter(function (entry) {
          return entry.entryName.endsWith('.class');
        })
        // Map will replace the value (not the reference, though) of what we are
        // currently iterating over with the value returned from this method
        .map(function (entry) {
          var name = entry.entryName.replace('.class', '');
          return new Promise(function (resolve, reject) {
            entry.getDataAsync(function (buffer, error) {
              _this._classBuffers.set(name, buffer);
              resolve();
            });
          });
        })).then(function () {
          return resolve(_this);
        });
      });
    }

    /**
     * Static constructor for a {@link Jar} that also attempts to load all
     * classes contained in the Jar file.
     *
     * Creates a new {@link ClassLoader} under the hood to load the classes.
     *
     * @example <caption>Loading a Jar file</caption>
     * // ES6 example
     * import { Jar } from 'jvm';
     * Jar.unpack('./test.jar')
     *   .then((jar) => {
     *     for (let [name, cls] of jar) {
     *       if (name === 'ClassNameToFind') {
     *         console.log(name, 'has', cls.methods.length, 'methods!');
     *       }
     *     }
     *   });
     * @param  {string} file - path to Jar file
     * @return {Promise<Jar>}
     */

  }, {
    key: Symbol.iterator,


    /**
     * {@link ClassCollection} iterator
     * @return {Iterator}
     */
    value: function value() {
      return this._classes[Symbol.iterator]();
    }
  }, {
    key: 'file',
    get: function get() {
      return this._file;
    }

    /**
     * @return {Map<string, Buffer>}
     */

  }, {
    key: 'classBuffers',
    get: function get() {
      return this._classBuffers;
    }
  }], [{
    key: 'unpack',
    value: function unpack(file) {
      var archive = new Jar(file);
      var classLoader = new _ClassLoader.ClassLoader();
      return new Promise(function (resolve, reject) {
        archive.loadBuffers().then(function () {
          classLoader.loadClasses(archive).then(function (coll) {
            archive._classes = coll;
            resolve(archive);
          });
        });
      });
    }
  }]);

  return Jar;
}();

exports.Jar = Jar;