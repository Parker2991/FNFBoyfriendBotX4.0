'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pipeline = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _Timer = require('./Timer');

var _events = require('events');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Pipeline = function (_EventEmitter) {
  _inherits(Pipeline, _EventEmitter);

  function Pipeline(name) {
    _classCallCheck(this, Pipeline);

    var _this = _possibleConstructorReturn(this, (Pipeline.__proto__ || Object.getPrototypeOf(Pipeline)).call(this));

    _this.name = name;
    _this.steps = [];
    _this.results = {};
    return _this;
  }

  _createClass(Pipeline, [{
    key: 'after',
    value: function after(fn) {
      var name = 'execution';
      if (typeof fn === 'string') {
        name = fn;
        fn = arguments[1];
      }
      this.on(name + '-ended', fn);
    }
  }, {
    key: 'afterStep',
    value: function afterStep(name, fn) {
      var _this2 = this;

      this.on('step-ended', function (evName) {
        if (name === evName) {
          fn(_this2.results[name].result, _this2.results[name].elapsed);
        }
      });
    }
  }, {
    key: 'before',
    value: function before(fn) {
      var name = 'execution';
      if (typeof fn === 'string') {
        name = fn;
        fn = arguments[1];
      }
      this.on(name + '-started', fn);
    }
  }, {
    key: 'addStep',
    value: function addStep(name, lambda) {
      this.steps.push([name, lambda]);
    }
  }, {
    key: 'execute',
    value: function execute(jar) {
      var _this3 = this;

      this.emit('execution-started', jar);
      var elapsed = _Timer.Timer.time(function () {
        _this3._runSteps(jar);
      });
      this.emit('execution-ended', elapsed);
    }
  }, {
    key: 'log',
    value: function log() {
      var args = [].concat(Array.prototype.slice.call(arguments));
      args[0] = '[' + this.name + '] ' + args[0];
      console.log.apply(console, args);
    }
  }, {
    key: 'stepResult',
    value: function stepResult(name) {
      return this.results[name].result;
    }
  }, {
    key: '_runSteps',
    value: function _runSteps(jar) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.steps[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = _slicedToArray(_step.value, 2),
              name = _step$value[0],
              lambda = _step$value[1];

          this.emit('step-started', name);
          var elapsed = this._runStep(jar, name, lambda);
          this.emit('step-ended', name, elapsed);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }, {
    key: '_runStep',
    value: function _runStep(jar, name, lambda) {
      var result = null;
      var elapsed = _Timer.Timer.time(function () {
        result = lambda(jar);
      });
      this.results[name] = { elapsed: elapsed, result: result };
      return elapsed;
    }
  }]);

  return Pipeline;
}(_events.EventEmitter);

exports.Pipeline = Pipeline;