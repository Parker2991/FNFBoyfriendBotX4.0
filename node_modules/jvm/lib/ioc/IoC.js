'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _ = require('lodash');

var Container = function () {
  function Container() {
    _classCallCheck(this, Container);

    this.bindings = {};
  }

  _createClass(Container, [{
    key: 'exists',
    value: function exists(name) {
      var assert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

      var bound = name in this.bindings;

      if (!bound && assert) {
        throw new Error('Whoa, ' + name + ' has not been bound to this container!');
      }

      return bound;
    }
  }, {
    key: 'factory',
    value: function factory(cls) {
      var key = cls + 'Factory';

      this.exists(key, true);

      var Factory = this.bindings[key];
      return function () {
        return Factory.apply(null, _.values(arguments));
      };
    }
  }, {
    key: 'make',
    value: function make(name) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

      this.exists(name, true);
      return this.bindings[name].apply(null, params);
    }
  }, {
    key: 'set',
    value: function set(name, factory) {
      var overwrite = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

      if (name in this.bindings && !overwrite) {
        return;
      }

      this.bindings[name] = factory;
    }
  }]);

  return Container;
}();

var IoC = new Container();

exports.IoC = IoC;