'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VerboseClassVisitor = exports.ClassVisitor = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lodash = require('lodash');

var _ = _interopRequireWildcard(_lodash);

var _events = require('events');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ClassVisitor = function (_EventEmitter) {
  _inherits(ClassVisitor, _EventEmitter);

  function ClassVisitor(opts) {
    _classCallCheck(this, ClassVisitor);

    var _this = _possibleConstructorReturn(this, (ClassVisitor.__proto__ || Object.getPrototypeOf(ClassVisitor)).call(this));

    _this.opts = opts;
    return _this;
  }

  _createClass(ClassVisitor, [{
    key: 'accept',
    value: function accept(cls) {
      var start = process.hrtime();

      this.beginVisit(cls);

      if (this.hasListenerBound('visit-field')) {
        this.visitFields(cls);
      }

      if (this.hasListenerBound('visit-method')) {
        this.visitMethods(cls);
      }

      var _process$hrtime = process.hrtime(start),
          _process$hrtime2 = _slicedToArray(_process$hrtime, 2),
          elapsedSeconds = _process$hrtime2[0],
          elapsedNanos = _process$hrtime2[1];

      var elapsed = elapsedSeconds + elapsedNanos / 1000000000;

      this.endVisit(cls, elapsed);
    }
  }, {
    key: 'beginVisit',
    value: function beginVisit(cls) {
      this.emit('visit-start', cls);
    }
  }, {
    key: 'endVisit',
    value: function endVisit(cls, elapsed) {
      this.emit('visit-end', cls, elapsed);
    }
  }, {
    key: 'hasListenerBound',
    value: function hasListenerBound(type) {
      return this.listenerCount(type) > 0;
    }
  }, {
    key: 'visitField',
    value: function visitField(cls, field) {
      this.emit('visit-field', cls, field);
    }
  }, {
    key: 'visitFields',
    value: function visitFields(cls) {
      var _this2 = this;

      this._filterMembers(cls, 'fields').forEach(function (field) {
        return _this2.visitField(cls, field);
      });
    }
  }, {
    key: 'visitMethod',
    value: function visitMethod(cls, method) {
      this.emit('visit-method', cls, method);
    }
  }, {
    key: 'visitMethods',
    value: function visitMethods(cls) {
      var _this3 = this;

      this._filterMembers(cls, 'methods').forEach(function (method) {
        return _this3.visitMethod(cls, method);
      });
    }
  }, {
    key: '_filterMembers',
    value: function _filterMembers(cls, member) {
      var opts = this._optionsFor(member);

      if (opts === false || !opts.shouldVisit) {
        return [];
      }

      var filterFn = opts.filter || false;
      if (filterFn !== false) {
        return cls[member].filter(filterFn);
      }
      return cls[member];
    }
  }, {
    key: '_optionsFor',
    value: function _optionsFor(member) {
      return _.merge({
        // flag for if this member should be visited
        shouldVisit: true
      }, _.get(this.opts, member, {}));
    }
  }]);

  return ClassVisitor;
}(_events.EventEmitter);

var VerboseClassVisitor = function (_ClassVisitor) {
  _inherits(VerboseClassVisitor, _ClassVisitor);

  function VerboseClassVisitor(opts) {
    _classCallCheck(this, VerboseClassVisitor);

    var _this4 = _possibleConstructorReturn(this, (VerboseClassVisitor.__proto__ || Object.getPrototypeOf(VerboseClassVisitor)).call(this, opts));

    _this4.on('visit-start', function (cls) {
      return console.log('[visit-start]', cls.name);
    });
    _this4.on('visit-field', function (cls, field) {
      return console.log('[visit-field] %s %s.%s', field.desc, cls.name, field.name);
    });
    _this4.on('visit-method', function (cls, method) {
      return console.log('[visit-method] %s#%s%s', cls.name, method.name, method.desc);
    });
    _this4.on('visit-end', function (cls, elapsed) {
      return console.log('[visit-end] %s completed in %ss', cls.name, elapsed);
    });
    return _this4;
  }

  return VerboseClassVisitor;
}(ClassVisitor);

exports.ClassVisitor = ClassVisitor;
exports.VerboseClassVisitor = VerboseClassVisitor;