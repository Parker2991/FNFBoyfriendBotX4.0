"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Jar_1 = require("../src/core/Jar");
var ConstantInstruction = require('../src/core/jvm/instructions/ConstantInstruction');
var start = process.hrtime();
var seen = {};
Jar_1.Jar.unpack(process.argv[2])
    .then(function (jar) {
    var e_1, _a;
    var _b = __read(process.hrtime(start), 2), elapsedSeconds = _b[0], elapsedNanos = _b[1];
    var elapsed = (elapsedSeconds + (elapsedNanos / 1000000000));
    console.log('parsed jar contents after', elapsed, 'seconds');
    var _loop_1 = function (name_1, cls) {
        console.log(name_1, cls.methods.length, 'methods');
        cls.methods.forEach(function (m) {
            if (m.hasMethodBody) {
                console.log(name_1 + "#" + m.name + m.desc + ".size = " + m.instructions.length);
            }
        });
        if (cls.name === 'client') {
            console.log('found client class!');
            console.log(JSON.stringify({
                name: cls.name,
                superName: cls.superName,
                methodCount: cls.methods.length,
                fieldCount: cls.fields.length
            }, null, 2));
        }
    };
    try {
        for (var jar_1 = __values(jar), jar_1_1 = jar_1.next(); !jar_1_1.done; jar_1_1 = jar_1.next()) {
            var _c = __read(jar_1_1.value, 2), name_1 = _c[0], cls = _c[1];
            _loop_1(name_1, cls);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (jar_1_1 && !jar_1_1.done && (_a = jar_1.return)) _a.call(jar_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
})
    .catch(function (e) {
    console.error('bad luck', e);
});
//# sourceMappingURL=load-jar.js.map